@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using System.Web.Mvc.Html;
@using Umbraco.Web;
@using umbraco.NodeFactory;
@using Umbraco.Core.Models;
@using Umbraco.Core.Dynamics;

@{
  <section class="grey page-title">
    <div class="container">
      <div class="row">
        <div class="col-md-12 text-right">
          <h1 itemprop="name" style="color:#@Umbraco.Field("hexTitleColor") !important">@Umbraco.Field("pageName")</h1>
        </div>
      </div>
    </div>
  </section>
  IPublishedContent objBlogRoot = Model.Content.AncestorOrSelf("SmartBlogBlog");
  IEnumerable<IPublishedContent> colResults = null;
  Boolean blnUseSummaryOnList = Boolean.Parse(SmartBlogLibraries.Global.GetConfig().GetElementsByTagName("useSummaryOnList")[0].InnerText);
  if (!String.IsNullOrEmpty(Request.QueryString["q"]))
  {
    colResults = SmartBlogLibraries.Helpers.Search.SearchSite()
        .Select(x => Umbraco.TypedContent(x.Id))
        .Where(x =>
            x != null
            && x.Path.Split(',').Contains(objBlogRoot.Id.ToString())
            && x.DocumentTypeAlias == "SmartBlogPost");
  }
  else
  {
    colResults = Model.Content.DescendantsOrSelf("SmartBlogPost");
  }

  if (colResults != null && colResults.Count() > 0)
  {
    // Refine posts by tag
    if (!String.IsNullOrEmpty(Request.QueryString["tag"]))
    {
      colResults = colResults.Where(x =>
          (!String.IsNullOrEmpty(x.GetPropertyValue<String>("smartBlogTags"))
              && x.GetPropertyValue<String>("smartBlogTags").Split(',').Contains(Request.QueryString["tag"]))
          || (Request.QueryString["tag"] == SmartBlogLibraries.Global.GetConfig().GetElementsByTagName("defaultAuthor")[0].InnerText
              && String.IsNullOrEmpty(x.GetPropertyValue<String>("smartBlogTags"))));
    }

    // Refine posts by author
    if (!String.IsNullOrEmpty(Request.QueryString["author"]))
    {
      colResults = colResults.Where(x =>
          (!String.IsNullOrEmpty(x.GetPropertyValue<String>("smartBlogAuthor"))
              && x.GetPropertyValue<String>("smartBlogAuthor").Split(',').Contains(Request.QueryString["author"]))
          || (Request.QueryString["author"] == SmartBlogLibraries.Global.GetConfig().GetElementsByTagName("defaultAuthor")[0].InnerText
              && String.IsNullOrEmpty(x.GetPropertyValue<String>("smartBlogAuthor"))));
    }
    if (!String.IsNullOrEmpty(Request.QueryString["category"]))
    {
      colResults = colResults.Where(x => !String.IsNullOrEmpty(x.GetPropertyValue<String>("smartBlogCategory"))
          && x.GetPropertyValue<String>("smartBlogCategory").Split(',').Contains(Request.QueryString["category"]));
    }
    if (colResults != null && colResults.Count() > 0)
    {
      if (colResults.Count() > 0)
      {
        Int32 intPage = 1;
        if (!Int32.TryParse(Request.QueryString["p"], out intPage)) { intPage = 1; }
        UInt16 intItemsPerPage = 10;
        Int32 intSkip = (intPage - 1) * intItemsPerPage;
        Int32 intResultCount = colResults.Count();
		// Render paging
        @Html.Raw(SmartBlogLibraries.Helpers.Listing.RenderPaging(intPage, intResultCount, intItemsPerPage))
        <section class="grey section">
          <div class="container">
            <div class="portfolio course-list" itemscope itemtype="http://schema.org/NewsArticle">
              @foreach (IPublishedContent objPost1 in colResults
                    .OrderByDescending(x => x.GetPropertyValue<DateTime>("smartBlogDate"))
                    .Skip(intSkip)
                    .Take(intItemsPerPage))
              {
                String strAuthor = !String.IsNullOrEmpty(objPost1.GetPropertyValue<String>("smartBlogAuthor"))
                    ? objPost1.GetPropertyValue<String>("smartBlogAuthor")
                    : SmartBlogLibraries.Global.GetConfig().GetElementsByTagName("defaultAuthor")[0].InnerText;

                var image = objPost1.GetPropertyValue("smartBlogImage");
                string result = Convert.ToString(image);
                var bannerId = Umbraco.Media(result);
                var bannerUrl = bannerId.Url;

                try
                {
                  <div class="item @Html.Raw(objPost1.GetPropertyValue<String>("smartBlogCategory").Replace(" ", ""))">
                    <div class="shop-item-list entry">
                      <meta itemscope itemprop="mainEntityOfPage" itemtype="https://schema.org/WebPage" itemid="https://www.icslearn.co.uk" />
                      <div class="BlogListImage">
                        <a href="@Umbraco.NiceUrl(objPost1.Id)">
                          <span itemprop="image" itemscope itemtype="https://schema.org/ImageObject">
                            <img itemprop="url" src="@bannerUrl" alt="@objPost1.Name" class="img-responsive2" />
                            <meta itemprop="width" content="300">
                            <meta itemprop="height" content="300">
                          </span>
                          <div class="magnifier"></div>
                        </a>
                      </div>
                    </div>
                    <span itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
                      <span itemprop="logo" itemscope itemtype="https://schema.org/ImageObject">
                        <meta itemprop="url" content="https://www.icslearn.co.uk/images/logo.png">
                        <meta itemprop="width" content="300">
                        <meta itemprop="height" content="100">
                      </span>
                      <meta itemprop="name" content="ICS Learn">
                    </span>
                    <div class="shop-item-title clearfix">
                      <h4 itemprop="headline"><a href="@Umbraco.NiceUrl(objPost1.Id)" title="@objPost1.Name">@objPost1.Name</a></h4>
                      <div class="shopmeta">
                        <span class="fa fa-user"></span> By
                        <span itemprop="author" itemscope itemtype="https://schema.org/Person">
                          <a href="@Umbraco.NiceUrl(Model.Content.AncestorOrSelf("SmartBlogBlog").Id)?author=@strAuthor"><span itemprop="name">@strAuthor</span></a> at @(objPost1.GetPropertyValue<DateTime>("smartBlogDate").ToString(SmartBlogLibraries.Helpers.DateTime.DateFormatNormal))
                        </span>
                        <span class="pull-left">
                          @if (blnUseSummaryOnList)
                          {
                            <br />
                            <p></p>
                            <span itemprop="description">@Html.Raw(objPost1.GetPropertyValue<String>("smartBlogSummary"))</span>
                            <a title="Read More" href="@Umbraco.NiceUrl(objPost1.Id)"><span class="fa fa-arrow-circle-o-right">  Read More</span></a>
                          }
                          else
                          {
                            <span itemprop="articleBody">@Html.Raw(objPost1.GetPropertyValue<String>("smartBlogBody"))</span>
                          }
                        </span>
                      </div>
                    </div>
                    <div class="visible-buttons">
                      <a title="Read More" href="@Umbraco.NiceUrl(objPost1.Id)"><span class="fa fa-search"></span></a>
                    </div>
                  </div>
                }

                catch (Exception) { }
              }
            </div>
          </div>
        </section>
      }
    }
  }
}